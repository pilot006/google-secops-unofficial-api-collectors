{"Name":"1Password - Events","Integration":"Unofficial SecOps API Collectors","Script":"from SiemplifyJob import SiemplifyJob\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\nimport requests\nimport re\nfrom datetime import datetime, timedelta\nimport CollectorUtils\n\n\nINTEGRATION_NAME = \"Unofficial SecOps API Collectors\"\nSCRIPT_NAME = \"1Password - Events\"\n\nsiemplify = SiemplifyJob()\nsiemplify.script_name = SCRIPT_NAME\n\n# INIT INTEGRATION CONFIGURATION:\nBEARER = siemplify.extract_job_param(param_name=\"1Password Bearer Token\", print_value=False)\nAPI_URL = siemplify.extract_job_param(param_name=\"1Password Base URL\", print_value=True)\nTIME_INTERVAL = siemplify.extract_job_param(param_name=\"Job interval (minutes)\", print_value=True)\nINGESTION_SA_JSON = siemplify.extract_job_param(param_name=\"SecOps Ingestion API v2 JSON\", print_value=False)\nINGESTION_SA_JSON = json.loads(INGESTION_SA_JSON)\nCUSTOMER_ID = siemplify.extract_job_param(param_name=\"SecOps Customer ID\", print_value=False)\n\n# Log types: https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers\nLOG_TYPE = \"ONEPASSOWRD\"\nlog_batch = []\n\ndef main():\n\n    try:\n        \n        cursor = None\n        cursor = get_onepassword_events(cursor)\n        while cursor != None:\n            cursor = get_onepassword_events(cursor)\n\n        # If we still have logs in the batch, send them now that we're at the end\n        if log_batch != []:\n            siemplify.LOGGER.info('Sending non-full batch at end.')\n            c = CollectorUtils.secops.upload(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n            siemplify.LOGGER.info('SecOps API response: ' + c)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\ndef get_onepassword_events(cursor):\n    headers = {\n        \"Accept\":         \"application/json\",\n        \"Content-Type\":   \"applicaiton/json\",\n        \"Authorization\":  \"Bearer \" + BEARER\n    }\n\n    d = datetime.now() - timedelta(hours=0, minutes=int(TIME_INTERVAL))\n    start_time = d.strftime('%Y-%m-%dT%H:%M:00.0Z')\n    e = datetime.now() - timedelta(hours=0, minutes=1)\n    end_time = e.strftime('%Y-%m-%dT%H:%M:59.99999Z')\n    siemplify.LOGGER.info(\"start_time: \" + start_time)\n    siemplify.LOGGER.info(\"end_time: \" + end_time)\n\n    if cursor == None:\n        payload = {\n            \"limit\": 1000,\n            \"start_time\": start_time,\n            \"end_time\" : end_time\n        }\n    else:\n        payload = {\n            \"cursor\": cursor\n        }\n\n    # https://developer.1password.com/docs/events-api/reference/#post-apiv1auditevents\n    url = API_URL + \"/api/v1/auditevents\"\n    req = requests.post(url=url,headers=headers, json=payload)\n    siemplify.LOGGER.info(\"1Password API Response: \" + req.text)\n    js = json.loads(req.text)\n    if 'cursor' and 'has_more' in js:\n        siemplify.LOGGER.info('cursor detected: ' + js['cursor'])\n        for i in js['items']:\n            siemplify.LOGGER.info(i)\n            batch_logs(i)\n        if js['has_more'] == False:\n            return None\n        else:\n            return js['cursor']\n    else:\n        for i in js['items']:\n            batch_logs(i)\n        return None\n\ndef batch_logs(log_line):\n    batch_size = len(json.dumps(log_batch).encode())\n    siemplify.LOGGER.info('Batch size: ' + str(batch_size))\n    # Batch size is limited to 1 MB: https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries\n    if batch_size < 800000:\n        entry = { \"log_text\": json.dumps(log_line) }\n        log_batch.append(entry)\n        #siemplify.LOGGER.info(json.dumps(log_batch, indent=1))\n    else:\n        entry = { \"log_text\": json.dumps(log_line) }\n        log_batch.append(entry)\n        siemplify.LOGGER.info(\"Batch full. Sending to Google SecOps.\")\n        #siemplify.LOGGER.info(json.dumps(log_batch, indent=1))\n        c = CollectorUtils.secops.upload(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n        siemplify.LOGGER.info('SecOps API response: ' + c)\n        log_batch.clear()\n    \nif __name__ == \"__main__\":\n    main()","Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","RunIntervalInSeconds":900,"Description":"https://developer.1password.com/docs/events-api/reference/#post-apiv1auditevents","IsEnabled":true,"IsCustom":true,"Version":85,"IsSystem":false,"Parameters":[{"JobDefinitionId":164,"IsMandatory":true,"DefaultValue":"aaaaaa-bbbbbb-cccccc-dddddddd","Description":"Customer/tenant ID for Google SecOps","Name":"SecOps Customer ID","Type":2},{"JobDefinitionId":164,"IsMandatory":true,"DefaultValue":"https://events.1password.com","Description":"https://developer.1password.com/docs/events-api/reference/#servers","Name":"1Password Base URL","Type":2},{"JobDefinitionId":164,"IsMandatory":true,"DefaultValue":"1234","Description":"https://support.1password.com/events-reporting/#appendix-issue-or-revoke-bearer-tokens","Name":"1Password Bearer Token","Type":3},{"JobDefinitionId":164,"IsMandatory":true,"DefaultValue":"1","Description":"Minutes the job is scheduled for ","Name":"Job interval (minutes)","Type":1},{"JobDefinitionId":164,"IsMandatory":true,"DefaultValue":"{}","Description":"Ingestion v2 JSON credential for Google SecOps","Name":"SecOps Ingestion API v2 JSON","Type":3}],"PythonVersion":"None"}