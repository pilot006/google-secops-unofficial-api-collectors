{"Name":"DataPlane_SecOps SOAR Audit","Integration":"Unofficial SecOps API Collectors","Script":"from SiemplifyJob import SiemplifyJob\nimport json\nimport requests\nfrom datetime import datetime,timedelta\nimport base64\nfrom io import StringIO\nimport csv\nimport CollectorUtils\n\nINTEGRATION_NAME = \"Unofficial SecOps API Collectors\"\nSCRIPT_NAME = \"DataPlane_SecOps SOAR Audit\"\n\nsiemplify = SiemplifyJob()\nsiemplify.script_name = SCRIPT_NAME\n\n# INIT INTEGRATION CONFIGURATION:\nSOAR_HOSTNAME = siemplify.extract_job_param(param_name=\"SOAR Hostname\", print_value=True)\nJOB_INTERVAL = siemplify.extract_job_param(param_name=\"Job Interval\", print_value=True)\nSOAR_API_KEY = siemplify.extract_job_param(param_name=\"SOAR API Key\", print_value=False)\nINGESTION_SA_JSON = siemplify.extract_job_param(param_name=\"Service Account JSON\", print_value=False)\nINGESTION_SA_JSON = json.loads(INGESTION_SA_JSON)\nCUSTOMER_ID = siemplify.extract_job_param(param_name=\"SecOps Customer ID\", print_value=False)\nFORWARDER_ID = siemplify.extract_job_param(param_name=\"SecOps Forwarder Config ID\", print_value=True)\n\n# Log types: https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers\nLOG_TYPE = \"CHRONICLE_SOAR_AUDIT\"\nlog_batch = []\n\ndef main():\n\n    try:\n\n        auth_header = {\n            'content-type': 'application/json',\n            'Appkey' : SOAR_API_KEY\n        }\n        j = {\n            \"auditType\":1,\n            \"usersNames\":[]\n        }\n        url = \"https://\" + SOAR_HOSTNAME + \"/api/external/v1/settings/ExportAuditLastWeekAsCsvV2\"\n        req = requests.post(url=url,headers=auth_header, json=j)\n        d = datetime.now() - timedelta(hours=0, minutes=int(JOB_INTERVAL))\n        d = d.replace(second=0, microsecond=0)\n        siemplify.LOGGER.info(\"Using this date for comparison: \" + str(d))\n        if \"blob\" in req.text:\n            js = json.loads(req.text)\n            blob = js['blob']\n            logs = csv_to_json(blob)\n            for s in logs:\n                # Let's parse the timestamp to do a time comparison\n                date = datetime.strptime(s['Date'], \"%m/%d/%Y %H:%M:%S\")\n                if date > d:\n                    siemplify.LOGGER.info('date (' + str(date) + ') > d (' + str(d) + ')')\n                    batch_logs(s)\n        # If we still have logs in the batch, send them now that we're at the end\n        if log_batch != []:\n            siemplify.LOGGER.info('Sending non-full batch at end.')\n            c = CollectorUtils.secops.upload_via_dataplane(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            FORWARDER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n            siemplify.LOGGER.info('SecOps API response: ' + c)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\ndef csv_to_json(blob):\n    # Decode the base64 string\n    decoded_data = base64.b64decode(blob).decode('utf-8')\n    csv_file = StringIO(decoded_data)\n    csv_reader = csv.DictReader(csv_file)\n    data = list(csv_reader)\n    return data\n\ndef batch_logs(log_line):\n    batch_size = len(json.dumps(log_batch).encode())\n    siemplify.LOGGER.info('Batch size: ' + str(batch_size))\n    # Batch size is limited to 1 MB: https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries\n    if batch_size < 800000:\n        json_str = json.dumps(log_line)\n        json_bytes = json_str.encode('utf-8')\n        base64_bytes = base64.b64encode(json_bytes)\n        base64_str = base64_bytes.decode('utf-8')\n        entry = { \"data\": base64_str }\n        log_batch.append(entry)\n    else:\n        json_str = json.dumps(log_line)\n        json_bytes = json_str.encode('utf-8')\n        base64_bytes = base64.b64encode(json_bytes)\n        base64_str = base64_bytes.decode('utf-8')\n        entry = { \"data\": base64_str }\n        log_batch.append(entry)\n        siemplify.LOGGER.info(\"Batch full. Sending to Google SecOps.\")\n        c = CollectorUtils.secops.upload_via_dataplane(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            FORWARDER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n        siemplify.LOGGER.info('SecOps API response: ' + c)\n        log_batch.clear()\n\nif __name__ == \"__main__\":\n    main()","Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","RunIntervalInSeconds":900,"Description":"Collects Google SecOps SOAR audit logs. Logs are uploaded via Data Plane API","IsEnabled":true,"IsCustom":true,"Version":74,"IsSystem":false,"Parameters":[{"JobDefinitionId":281,"IsMandatory":true,"DefaultValue":"f2a4b480-652a-493d-b44f-7c1b5b0c26c8","Description":"Config ID for forwarder used for ingestion: https://cloud.google.com/chronicle/docs/install/forwarder-management-configurations#add-forwarders","Name":"SecOps Forwarder Config ID","Type":2},{"JobDefinitionId":281,"IsMandatory":true,"DefaultValue":"{}","Description":"Service account with these permission: \nchronicle.entities.import\nchronicle.events.import\nchronicle.logs.import ","Name":"Service Account JSON","Type":3},{"JobDefinitionId":281,"IsMandatory":true,"DefaultValue":"aaaaaa-bbbbbb-cccccc-dddddddd","Description":"Customer/tenant ID for Google SecOps","Name":"SecOps Customer ID","Type":2},{"JobDefinitionId":281,"IsMandatory":true,"DefaultValue":"mysoar.siemplify-soar.com","Description":"Hostname of the SOAR instance","Name":"SOAR Hostname","Type":2},{"JobDefinitionId":281,"IsMandatory":true,"DefaultValue":"1234","Description":"API key for retrieving audit logs","Name":"SOAR API Key","Type":3},{"JobDefinitionId":281,"IsMandatory":true,"DefaultValue":"5","Description":"Interval (in minutes) the job is scheduled to run. This will be used to compare timestamps. ","Name":"Job Interval","Type":1}],"PythonVersion":"None"}