{"Name":"ADSBFI Live Aircraft Feed","Integration":"Unofficial SecOps API Collectors","Script":"from SiemplifyJob import SiemplifyJob\nimport json\nimport requests\nfrom datetime import datetime\nimport CollectorUtils\n\nINTEGRATION_NAME = \"Unofficial SecOps API Collectors\"\nSCRIPT_NAME = \"ADSBFI Live Aircraft Feed\"\n\nsiemplify = SiemplifyJob()\nsiemplify.script_name = SCRIPT_NAME\n# INIT INTEGRATION CONFIGURATION:\ndist = siemplify.extract_job_param(param_name=\"Distance\", print_value=True)\nlatitude = siemplify.extract_job_param(param_name=\"Latitude\", print_value=True)\nlongitude = siemplify.extract_job_param(param_name=\"Longitude\", print_value=True)\nINGESTION_SA_JSON = siemplify.extract_job_param(param_name=\"SecOps Ingestion API v2 JSON\", print_value=False)\nINGESTION_SA_JSON = json.loads(INGESTION_SA_JSON)\nCUSTOMER_ID = siemplify.extract_job_param(param_name=\"SecOps Customer ID\", print_value=False)\n\n# Log types: https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers\nLOG_TYPE = \"UDM\"\nlog_batch = []\n\ndef main():\n\n    try:\n        headers = {\n            \"Accept\":         \"application/json\",\n            \"Content-Type\":   \"application/json\"\n        }\n        \n        # https://github.com/adsbfi/opendata/blob/main/README.md\n        url = \"https://opendata.adsb.fi/api/v2/lat/\" + latitude \n        url = url + \"/lon/\" + longitude + \"/dist/\" + dist\n        req = requests.get(url=url,headers=headers)\n        siemplify.LOGGER.info(\"ads.fi response: \" + req.text)\n        js = json.loads(req.text)\n        for i in js[\"aircraft\"]:\n            if 'flight' in i:\n                # Strip out the whitespace from the flight number\n                flight = i[\"flight\"]\n                flight = flight.replace(' ', '')\n                i[\"flight\"] = flight\n\n                # Create an app name to send along to our SIEM\n                i[\"app_name\"] = \"ADSB.FI Aircraft Tracking\"\n\n                # Let's also send a timestamp\n                d = datetime.now()\n                d = d.strftime('%Y-%m-%dT%H:%M:%S.%fZ')\n                i[\"date_time\"] = d\n                batch_logs(i)\n        # If we still have logs in the batch, send them now that we're at the end\n        if log_batch != []:\n            siemplify.LOGGER.info('Sending non-full batch at end.')\n            c = CollectorUtils.secops.upload(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n            siemplify.LOGGER.info('SecOps API response: ' + c)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\ndef batch_logs(log_line):\n    batch_size = len(json.dumps(log_batch).encode())\n    siemplify.LOGGER.info('Batch size: ' + str(batch_size))\n    # Batch size is limited to 1 MB: https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries\n    if batch_size < 800000:\n        entry = { \"log_text\": json.dumps(log_line) }\n        log_batch.append(entry)\n    else:\n        entry = { \"log_text\": json.dumps(log_line) }\n        log_batch.append(entry)\n        siemplify.LOGGER.info(\"Batch full. Sending to Google SecOps.\")\n        c = CollectorUtils.secops.upload(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n        siemplify.LOGGER.info('SecOps API response: ' + c)\n        log_batch.clear()\n\nif __name__ == \"__main__\":\n    main()","Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","RunIntervalInSeconds":900,"Description":"Collects ADS-B flight data around a geographic point using ADSB.FI free API","IsEnabled":true,"IsCustom":true,"Version":15,"IsSystem":false,"Parameters":[{"JobDefinitionId":151,"IsMandatory":true,"DefaultValue":"5","Description":"Radius around coordinates to retrieve aircraft from","Name":"Distance","Type":1},{"JobDefinitionId":151,"IsMandatory":true,"DefaultValue":"40.730610","Description":"Latitude","Name":"Latitude","Type":2},{"JobDefinitionId":151,"IsMandatory":true,"DefaultValue":"-73.935242","Description":"Longitude","Name":"Longitude","Type":2},{"JobDefinitionId":151,"IsMandatory":true,"DefaultValue":"{}","Description":"Ingestion v2 JSON credential for Google SecOps","Name":"SecOps Ingestion API v2 JSON","Type":3},{"JobDefinitionId":151,"IsMandatory":true,"DefaultValue":"aaaaaa-bbbbbb-cccccc-dddddddd","Description":"Customer/tenant ID for Google SecOps","Name":"SecOps Customer ID","Type":2}],"PythonVersion":"None"}