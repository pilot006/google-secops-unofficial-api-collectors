{"Name":"Okta - Events","Integration":"Unofficial SecOps API Collectors","Script":"from SiemplifyJob import SiemplifyJob\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\nimport requests\nimport re\nfrom datetime import datetime, timedelta\nimport CollectorUtils\n\n\nINTEGRATION_NAME = \"Unofficial SecOps API Collectors\"\nSCRIPT_NAME = \"Okta - Events\"\n\nsiemplify = SiemplifyJob()\nsiemplify.script_name = SCRIPT_NAME\n\n# INIT INTEGRATION CONFIGURATION:\nAPI_KEY = siemplify.extract_job_param(param_name=\"Okta API Key\", print_value=True)\nOKTA_DOMAIN = siemplify.extract_job_param(param_name=\"Okta Domain\", print_value=True)\nTIME_INTERVAL = siemplify.extract_job_param(param_name=\"Job interval (minutes)\", print_value=True)\nINGESTION_SA_JSON = siemplify.extract_job_param(param_name=\"SecOps Ingestion API v2 JSON\", print_value=False)\nINGESTION_SA_JSON = json.loads(INGESTION_SA_JSON)\nCUSTOMER_ID = siemplify.extract_job_param(param_name=\"SecOps Customer ID\", print_value=False)\n\n# Log types: https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers\nLOG_TYPE = \"OKTA\"\nlog_batch = []\n\ndef main():\n\n    try:\n\n        d = datetime.now() - timedelta(hours=0, minutes=int(TIME_INTERVAL))\n        d = d.strftime('%Y-%m-%dT%H:%M:00.0Z')\n        siemplify.LOGGER.info(\"Current zulu time: \" + d)\n        \n        url = \"https://\" + OKTA_DOMAIN + \"/api/v1/logs?since=\" + d\n        while url != False:\n            url = get_okta_events(url)\n\n        # If we still have logs in the batch, send them now that we're at the end\n        if log_batch != []:\n            siemplify.LOGGER.info('Sending non-full batch at end.')\n            c = CollectorUtils.secops.upload(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n            siemplify.LOGGER.info('SecOps API response: ' + c)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\ndef get_okta_events(url):\n    headers = {\n        \"Accept\":         \"application/json\",\n        \"Content-Type\":   \"applicaiton/json\",\n        \"Authorization\":  \"SSWS \" + API_KEY\n    }\n\n    req = requests.get(url=url,headers=headers)\n    siemplify.LOGGER.info(\"Okta API Response: \" + req.text)\n    page_urls = dict(req.headers)['link'].split(' ')\n    url_self = re.sub(r\"<|>|;\", \"\", page_urls[0])\n    url_next = re.sub(r\"<|>|;\", \"\", page_urls[2])\n    siemplify.LOGGER.info(url_self)\n    siemplify.LOGGER.info(url_next)\n    if url_self == url_next:\n        js = json.loads(req.text)\n        for i in js:\n            batch_logs(i)\n        return False\n    else:\n        js = json.loads(req.text)\n        for i in js:\n            batch_logs(i)\n        return url_next\n\ndef batch_logs(log_line):\n    batch_size = len(json.dumps(log_batch).encode())\n    siemplify.LOGGER.info('Batch size: ' + str(batch_size))\n    # Batch size is limited to 1 MB: https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries\n    if batch_size < 800000:\n        entry = { \"log_text\": json.dumps(log_line) }\n        log_batch.append(entry)\n        #siemplify.LOGGER.info(json.dumps(log_batch, indent=1))\n    else:\n        entry = { \"log_text\": json.dumps(log_line) }\n        log_batch.append(entry)\n        siemplify.LOGGER.info(\"Batch full. Sending to Google SecOps.\")\n        #siemplify.LOGGER.info(json.dumps(log_batch, indent=1))\n        c = CollectorUtils.secops.upload(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n        siemplify.LOGGER.info('SecOps API response: ' + c)\n        log_batch.clear()\n    \nif __name__ == \"__main__\":\n    main()","Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","RunIntervalInSeconds":900,"Description":"","IsEnabled":true,"IsCustom":true,"Version":48,"IsSystem":false,"Parameters":[{"JobDefinitionId":148,"IsMandatory":true,"DefaultValue":"mycompany.okta.com","Description":"Okta domain, in the format <your company>.okta.com","Name":"Okta Domain","Type":2},{"JobDefinitionId":148,"IsMandatory":true,"DefaultValue":"1234","Description":"API key for Okta","Name":"Okta API Key","Type":3},{"JobDefinitionId":148,"IsMandatory":true,"DefaultValue":"1","Description":"Minutes the job is scheduled for ","Name":"Job interval (minutes)","Type":1},{"JobDefinitionId":148,"IsMandatory":true,"DefaultValue":"{}","Description":"Ingestion v2 JSON credential for Google SecOps","Name":"SecOps Ingestion API v2 JSON","Type":3},{"JobDefinitionId":148,"IsMandatory":true,"DefaultValue":"aaaaaa-bbbbbb-cccccc-dddddddd","Description":"Customer/tenant ID for Google SecOps","Name":"SecOps Customer ID","Type":2}],"PythonVersion":"None"}