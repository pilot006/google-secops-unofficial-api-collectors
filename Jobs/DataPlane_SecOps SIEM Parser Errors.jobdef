{"Name":"DataPlane_SecOps SIEM Parser Errors","Integration":"Unofficial SecOps API Collectors","Script":"from SiemplifyJob import SiemplifyJob\nimport google.auth.transport.requests\nfrom google.oauth2 import service_account\nimport json\nimport requests\nimport base64\nfrom datetime import datetime, timedelta, timezone\nimport CollectorUtils\n\nINTEGRATION_NAME = \"Unofficial SecOps API Collectors\"\nSCRIPT_NAME = \"DataPlane_SecOps SIEM Parser Errors\"\n\nsiemplify = SiemplifyJob()\nsiemplify.script_name = SCRIPT_NAME\n# INIT INTEGRATION CONFIGURATION:\nLOG_TYPES = siemplify.extract_job_param(param_name=\"SecOps Log Types\", print_value=True)\nJOB_INTERVAL = siemplify.extract_job_param(param_name=\"Job Interval (minutes)\", print_value=True)\nINGESTION_SA_JSON = siemplify.extract_job_param(param_name=\"Service Account JSON\", print_value=False)\nINGESTION_SA_JSON = json.loads(INGESTION_SA_JSON)\nBK_API_JSON = siemplify.extract_job_param(param_name=\"Backstory API JSON\", print_value=False)\nBK_API_JSON = json.loads(BK_API_JSON)\nCUSTOMER_ID = siemplify.extract_job_param(param_name=\"SecOps Customer ID\", print_value=False)\nFORWARDER_ID = siemplify.extract_job_param(param_name=\"SecOps Forwarder Config ID\", print_value=True)\n\n# Log types: https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers\nLOG_TYPE = \"CHRONICLE_FEED\"\nlog_batch = []\n\ndef main():\n\n    # Generate required dates for use in APInow_utc = datetime.utcnow()\n    now_utc = datetime.utcnow()\n    end_time = now_utc.strftime(\"%Y-%m-%dT%H:%M:%S\") + \"Z\"\n    start_time = now_utc - timedelta(minutes=int(JOB_INTERVAL))\n    start_time = start_time.strftime(\"%Y-%m-%dT%H:%M:%S\") + \"Z\"\n\n    try:\n        \n        log_types_arr = LOG_TYPES.split(\",\")\n        for log in log_types_arr:\n            siemplify.LOGGER.info(f'Checking log type {log} for errors')\n            endpoint = f\"https://backstory.googleapis.com/v1/tools/cbnParsers:listCbnParserErrors?log_type={log}&start_time={start_time}&end_time={end_time}\"\n            siemplify.LOGGER.info(f\"Using API endpoint: {endpoint}\")\n            err = get_parser_errors(endpoint)\n            if 'errors' in err:\n                for i in err['errors']:\n                    c_index = 0\n                    for c in i['logs']:\n                        c = base64.b64decode(c).decode('utf-8')\n                        i['logs'][c_index] = c\n                        c_index = c_index + 1\n                    batch_logs(i)\n            else:\n                siemplify.LOGGER.info(f\"No errors found for {log}\")\n        \n        if log_batch != []:\n            siemplify.LOGGER.info('Sending non-full batch at end.')\n            c = CollectorUtils.secops.upload_via_dataplane(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            FORWARDER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n            siemplify.LOGGER.info('SecOps API response: ' + c)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n    \n\ndef get_parser_errors(api_endpoint):\n    credentials = service_account.Credentials.from_service_account_info(\n        BK_API_JSON, scopes=['https://www.googleapis.com/auth/chronicle-backstory']\n        )\n    request = google.auth.transport.requests.Request()\n    credentials.refresh(request)\n    hd = {\n        \"Authorization\": \"Bearer \" + credentials.token,\n        \"Content-Type\": \"application/json\"\n    }\n    req = requests.get(api_endpoint, headers=hd)\n    return(req.json())\n\ndef batch_logs(log_line):\n    batch_size = len(json.dumps(log_batch).encode())\n    siemplify.LOGGER.info('Batch size: ' + str(batch_size))\n    # Batch size is limited to 1 MB: https://cloud.google.com/chronicle/docs/reference/ingestion-api#unstructuredlogentries\n    if batch_size < 800000:\n        # Convert JSON object to string\n        json_str = json.dumps(log_line)\n        # Encode the JSON string to bytes\n        json_bytes = json_str.encode('utf-8')\n        # Encode the bytes to base64\n        base64_bytes = base64.b64encode(json_bytes)\n        # Convert base64 bytes to string\n        base64_str = base64_bytes.decode('utf-8')\n        entry = { \"data\": base64_str }\n        log_batch.append(entry)\n    else:\n        # Convert JSON object to string\n        json_str = json.dumps(log_line)\n        # Encode the JSON string to bytes\n        json_bytes = json_str.encode('utf-8')\n        # Encode the bytes to base64\n        base64_bytes = base64.b64encode(json_bytes)\n        # Convert base64 bytes to string\n        base64_str = base64_bytes.decode('utf-8')\n        entry = { \"data\": base64_str }\n        log_batch.append(entry)\n        siemplify.LOGGER.info(\"Batch full. Sending to Google SecOps.\")\n        c = CollectorUtils.secops.upload_via_dataplane(INGESTION_SA_JSON, \n                                            CUSTOMER_ID,\n                                            FORWARDER_ID,\n                                            LOG_TYPE,\n                                            log_batch\n                                            )\n        siemplify.LOGGER.info('SecOps API response: ' + c)\n        log_batch.clear()\n\nif __name__ == \"__main__\":\n    main()","Creator":"036fe879-4c16-461e-b6d9-b1c552806fa0","RunIntervalInSeconds":900,"Description":"Collects parser errors for specified log types. Logs are uploaded via Data Plane API","IsEnabled":true,"IsCustom":true,"Version":39,"IsSystem":false,"Parameters":[{"JobDefinitionId":381,"IsMandatory":true,"DefaultValue":"f2a4b480-652a-493d-b44f-7c1b5b0c26c8","Description":"Config ID for forwarder used for ingestion: https://cloud.google.com/chronicle/docs/install/forwarder-management-configurations#add-forwarders","Name":"SecOps Forwarder Config ID","Type":2},{"JobDefinitionId":381,"IsMandatory":true,"DefaultValue":"{}","Description":"Service account with these permission: \nchronicle.entities.import\nchronicle.events.import\nchronicle.logs.import ","Name":"Service Account JSON","Type":3},{"JobDefinitionId":381,"IsMandatory":true,"DefaultValue":"aaaaaa-bbbbbb-cccccc-dddddddd","Description":"Customer/tenant ID for Google SecOps","Name":"SecOps Customer ID","Type":2},{"JobDefinitionId":381,"IsMandatory":true,"DefaultValue":"{}","Description":"Backstory API JSON key with parser permissions","Name":"Backstory API JSON","Type":3},{"JobDefinitionId":381,"IsMandatory":true,"DefaultValue":"UDM,LIMACHARLIE_EDR","Description":"SecOps log types to check for errors against. https://cloud.google.com/chronicle/docs/ingestion/parser-list/supported-default-parsers","Name":"SecOps Log Types","Type":2},{"JobDefinitionId":381,"IsMandatory":true,"DefaultValue":"30","Description":"This should match the interval that you set the job to run. Ensure these match to make sure data is not repeated","Name":"Job Interval (minutes)","Type":1}],"PythonVersion":"None"}